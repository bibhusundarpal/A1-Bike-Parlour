trigger ServiceLineItemUpdateTrigger on Service_Line_Items__c (before insert, before update, after insert, after update, after delete) {
    
    // Map to store inventory ID and the quantity changes for each inventory item
    Map<Id, Decimal> inventoryAdjustments = new Map<Id, Decimal>();
    Set<Id> inventoryIdsToCheck = new Set<Id>();

    // Before Insert and Before Update: Check if Quantity Available is sufficient
    if (Trigger.isInsert || Trigger.isUpdate) {
        for (Service_Line_Items__c lineItem : Trigger.new) {
            // Skip if there's no related inventory item or quantity used is null
            if (lineItem.Inventory_Item__c != null && lineItem.Quantity_Used__c != null) {
                inventoryIdsToCheck.add(lineItem.Inventory_Item__c);
            }
        }

        // Query to get available quantity for the inventory items being used
        Map<Id, Service_Inventory__c> inventoryItemsMap = new Map<Id, Service_Inventory__c>(
            [SELECT Id, Quantity_Available__c 
             FROM Service_Inventory__c 
             WHERE Id IN :inventoryIdsToCheck]
        );

        for (Service_Line_Items__c lineItem : Trigger.new) {
            // Get the old quantity used for updates (to determine net change)
            Decimal oldQuantityUsed = 0;
            if (Trigger.isUpdate) {
                Service_Line_Items__c oldLineItem = Trigger.oldMap.get(lineItem.Id);
                oldQuantityUsed = oldLineItem.Quantity_Used__c;
            }

            // Calculate the net change in quantity (new quantity - old quantity for updates)
            Decimal netQuantityChange = lineItem.Quantity_Used__c - oldQuantityUsed;

            // Check if the inventory has enough quantity available
            Service_Inventory__c inventoryItem = inventoryItemsMap.get(lineItem.Inventory_Item__c);
            if (inventoryItem != null && inventoryItem.Quantity_Available__c < netQuantityChange) {
                lineItem.Quantity_Used__c.addError('Item Unavailable: Not enough quantity available for this item.');
            }
        }
    }

    // After Insert, After Update, After Delete: Adjust Quantity Available for Inventory
    if (Trigger.isAfter && (Trigger.isInsert || Trigger.isUpdate || Trigger.isDelete)) {
        // Adjustments for inserts and updates (decrease available quantity)
        if (Trigger.isInsert || Trigger.isUpdate) {
            for (Service_Line_Items__c lineItem : Trigger.new) {
                if (lineItem.Inventory_Item__c != null && lineItem.Quantity_Used__c != null) {
                    Decimal quantityChange = lineItem.Quantity_Used__c;

                    // For updates, account for the difference between old and new quantity
                    if (Trigger.isUpdate) {
                        Service_Line_Items__c oldLineItem = Trigger.oldMap.get(lineItem.Id);
                        quantityChange = lineItem.Quantity_Used__c - oldLineItem.Quantity_Used__c;
                    }

                    if (inventoryAdjustments.containsKey(lineItem.Inventory_Item__c)) {
                        inventoryAdjustments.put(lineItem.Inventory_Item__c, inventoryAdjustments.get(lineItem.Inventory_Item__c) - quantityChange);
                    } else {
                        inventoryAdjustments.put(lineItem.Inventory_Item__c, -quantityChange);
                    }
                }
            }
        }

        // Adjustments for deletes (increase available quantity)
        if (Trigger.isDelete) {
            for (Service_Line_Items__c lineItem : Trigger.old) {
                if (lineItem.Inventory_Item__c != null && lineItem.Quantity_Used__c != null) {
                    Decimal quantityChange = lineItem.Quantity_Used__c;

                    if (inventoryAdjustments.containsKey(lineItem.Inventory_Item__c)) {
                        inventoryAdjustments.put(lineItem.Inventory_Item__c, inventoryAdjustments.get(lineItem.Inventory_Item__c) + quantityChange);
                    } else {
                        inventoryAdjustments.put(lineItem.Inventory_Item__c, quantityChange);
                    }
                }
            }
        }

        // Query for the impacted inventory items
        List<Service_Inventory__c> inventoryItemsToUpdate = [
            SELECT Id, Quantity_Available__c
            FROM Service_Inventory__c
            WHERE Id IN :inventoryAdjustments.keySet()
        ];

        // Update the Quantity Available for each inventory item
        for (Service_Inventory__c inventoryItem : inventoryItemsToUpdate) {
            if (inventoryAdjustments.containsKey(inventoryItem.Id)) {
                inventoryItem.Quantity_Available__c += inventoryAdjustments.get(inventoryItem.Id);
            }
        }

        // Update the inventory records with the new quantities
        if (!inventoryItemsToUpdate.isEmpty()) {
            update inventoryItemsToUpdate;
        }
    }
}
