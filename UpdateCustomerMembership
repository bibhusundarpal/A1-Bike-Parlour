trigger UpdateCustomerMembership on Service_Request__c (after insert, after update, after delete, after undelete) {
    // Set to store unique Vehicle IDs to be processed.
    Set<Id> vehicleIds = new Set<Id>();

    // Collect Vehicle IDs from the Service Requests in the trigger context.
    if (Trigger.isInsert || Trigger.isUpdate || Trigger.isUndelete) {
        for (Service_Request__c sr : Trigger.new) {
            if (sr.Vehicle__c != null) {
                vehicleIds.add(sr.Vehicle__c);
            }
        }
    }

    if (Trigger.isDelete) {
        for (Service_Request__c sr : Trigger.old) {
            if (sr.Vehicle__c != null) {
                vehicleIds.add(sr.Vehicle__c);
            }
        }
    }

    // Map to store the total costs for each Vehicle.
    Map<Id, Decimal> vehicleTotalCosts = new Map<Id, Decimal>();

    // Query all Service Requests related to the Vehicles affected.
    List<AggregateResult> aggregatedResults = [
        SELECT Vehicle__c, SUM(Total_Cost__c) totalServiceCost
        FROM Service_Request__c
        WHERE Vehicle__c IN :vehicleIds
        GROUP BY Vehicle__c
    ];

    // Store the aggregated total service costs for each Vehicle.
    for (AggregateResult ar : aggregatedResults) {
        Id vehicleId = (Id) ar.get('Vehicle__c');
        Decimal totalServiceCost = (Decimal) ar.get('totalServiceCost');
        vehicleTotalCosts.put(vehicleId, totalServiceCost);
    }

    // List to store Customer records to update.
    List<Customer__c> customersToUpdate = new List<Customer__c>();

    // Query related Vehicles and their Customers.
    List<Vehicle__c> vehicles = [
        SELECT Id, Customer__c, Customer__r.Membership_Level__c
        FROM Vehicle__c
        WHERE Id IN :vehicleIds
    ];

    // Determine the membership tier for each Vehicle's Customer based on the total cost.
    for (Vehicle__c vehicle : vehicles) {
        Decimal totalCost = vehicleTotalCosts.get(vehicle.Id);

        if (totalCost != null && vehicle.Customer__c != null) {
            // Create a new Customer object for update.
            Customer__c customer = new Customer__c();
            customer.Id = vehicle.Customer__c;

            // Set the membership level based on the total cost thresholds.
            if (totalCost >= 10000) {
                customer.Membership_Level__c = 'Platinum';
            } else if (totalCost >= 5000) {
                customer.Membership_Level__c = 'Gold';
            } else if (totalCost >= 3000) {
                customer.Membership_Level__c = 'Silver';
            } else {
                customer.Membership_Level__c = null; // Clears membership if below 3000.
            }

            customersToUpdate.add(customer);
        }
    }

    // Update the Customer records with their new membership levels.
    if (!customersToUpdate.isEmpty()) {
        try {
            update customersToUpdate;
        } catch (DmlException e) {
            System.debug('Error updating customers: ' + e.getMessage());
        }
    }
}
